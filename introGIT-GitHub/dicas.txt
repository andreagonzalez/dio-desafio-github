Git e GitHub

GUI x CLI

GUI – Graphic User Interface

CLI – Comand Line Interface

Comandos básicos
Windows 		x 	 
cd				cd – change directory
dir				ls -a (mostra arquivos ocultos)
mkdir				mkdir
del / rmdir			rm rf
echo hello > hello.txt		echo hello > hello.txt

Instalar GIT

Windows
Marcar as opções Git Bash here e Git GUI here

Linux – Ubuntu
$apt install git

Entendendo como o GIT funciona por baixo dos panos

- SHA1 → Secure Hash Algorithm, é um conjunto de funções hash criptográficas projetadas pela NSA (National Security Agence). A encriptação gera um conjunto de caracteres de 40 dígitos que é único e serve como identificação.

É uma forma “curta” de representar um arquivo.
1 echo “ola mundo”  openssl | sha1
2 > (stdin)= f9fc856e559b950175f2b7cd7dad61facbe58e7b

No terminal
$ openssl sha1 nome_do_arquivo.txt 
vai retornar uma chave 
copiar a chave
vou no texto e mudo algo 
no terminal gerar de novo a chave
volto no texto e tiro o que eu mudei
vou no terminal e gero a chave de novo e depois de ter mudado para o texto original ele vai gerar a mesma chave inicial

- Objetos fundamentais do GIT

BLOBS 
$ echo ‘conteudo’  |  git hash-object –stdin
> aqui vai retornar a chave

$ echo -e ‘conteudo’ | openssl sha1

Blob  Tamanho 42
\0
Ola Mundo (conteúdo do arquivo)

Para que gere a mesma chave tanto no git quanto no openssl tem que ser assim:

$ echo ‘conteudo’  |  git hash-object –stdin
> aqui vai retornar a chave

$ echo -e ‘blob 9/0conteudo’ | openssl sha1


TREES
As árvores armazenam Blobs e Commits

Tree	<tamanho>
\0
blob sa4d8s  texto.txt



COMMITS
é o objeto que junta tudo
tree 		s4a5sq1
parente 	a98acq1
autor 		parkles
mensagem 	“inicia…”
timestamp

O SHA1 desse commit é o hash de toda essa informação

- Sistema distribuído

- Segurança

Primeiros comandos GIT

- Configurar o GIT
git config –global user.email “andreavgonzalez7@gmail”
git config –global user.name Andrea

- Iniciar o GIT
git init
git add * (o asterisco adiciona tudo, mas posso botar só o nome do arquivo)
git commit -m “mensagem do commit”

- Iniciar o versionamento

- Criar um commit



git init → criamos um repositório dentro da pasta

Tracked e Untracked

Dentro do Tracked temos:
Unmodified → arquivo que ainda não foi modificado
Modified → modificado algo dentro do arquivo
Staged → é onde ficam os arquivos que estão se preparando para fazer parte de outro tipo de agrupamento.

O add moveu o arquivo de unmodified para o stage
Como? Com o SHA1
O commit é um envelope, sai do stage e vai para um estágio diferente. Ele cria um snapshot (foto) e volta eles para unmodified.
Então unmodified → modified → commit → unmodified → ...é um ciclo

Servidor → Remote Repository
Ambiente de Desenvolvimento → working directory
Staging Area
Local Repository

GitHub

No terminal digitar:
$ git config --list (vai exibir as configurações feitas)
> user.name=[Andrea González]
user.email=[andreavgonzalez7@gmail.com[
color.ui=auto
filesystem.Ubuntu|11.0.9|/dev/sda1.timestampresolution=9000 nanoseconds
filesystem.Ubuntu|11.0.9|/dev/sda1.minracythreshold=6392 microseconds
filesystem.Ubuntu|11.0.9.1|/dev/sda1.timestampresolution=5000 nanoseconds
filesystem.Ubuntu|11.0.9.1|/dev/sda1.minracythreshold=6673 microseconds
filesystem.Ubuntu|11.0.9.1|/dev/sdb3.timestampresolution=4000 nanoseconds
filesystem.Ubuntu|11.0.9.1|/dev/sdb3.minracythreshold=4803 microseconds
filesystem.Private Build|14.0.2|/dev/sda1.timestampresolution=64000 nanoseconds
filesystem.Private Build|14.0.2|/dev/sda1.minracythreshold=4920 microseconds
filesystem.Oracle Corporation|11.0.10|/dev/sda1.timestampresolution=4000 nanoseconds
filesystem.Oracle Corporation|11.0.10|/dev/sda1.minracythreshold=6561 microseconds
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true

q (sai)

Para alterar as configurações → aqui ele vai tirar as configurações de e-mail e nickname
$ git config --global --unset user.email
$ git config --global --unset user.nickname

para configurar o e-mail novamente é só fazer
$ git config --global user.email
$ git config --global user.nickname
Agora criado o repositório no GitHub tem que configurar o repositório localmente
Precisamos enviar os arquivos locais para o GitHub

Primeiro adicionar a origem
$ git remote add origin https://github.com/andreagonzalez/livro-receitas.git

Se quiser ver o que fiz
$ git remote -v
$ git status

para empurrar os arquivos
$ git push origin master

desde 13/08/2021 tem que gerar um token para aessar

Git Clone
Conflitos de merge → alterações na mesma linha

